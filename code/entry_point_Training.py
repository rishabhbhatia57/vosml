
# -*- coding: utf-8 -*-
"""
Created on Wed Jul 21 11:33:57 2021

@author: Administrator
"""

# -*- coding: utf-8 -*-
"""Fossil model training

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SYoHlQM-I5ZN3p0xMcB3EWxRnLkZA5eT
"""

import pandas as pd
import mysql.connector
import time
from datetime import datetime
import asyncio
#!pip install asyncio
import nest_asyncio
#!pip3 install nest_asyncio
nest_asyncio.apply()
import model_training
import sys
import os



db_name = sys.argv[1]

batchno = sys.argv[2]
analstageseq = sys.argv[3]
ruleseq = sys.argv[4]


#def main():
    
    
now = datetime.now()
loop = asyncio.get_event_loop()
current_time = now.strftime("%H:%M:%S")
print("Current Time =", current_time)
start = time.time()


model_prefix  = ''
time_col      = "From_Date"
data_col      = "SM1"
partition_col = "UniqueKey"
db_username   = 'cbiadbuser'
db_passw      = 'Platform@2018'
db_ip         = '127.0.0.1'
#db_name       = 'EthosBI'
input_table_name    = 'R_InputTable'
input_file_name = 'training_data.csv'

#save_path     = 'E:/Jash/Procedural code/Models/'
save_path          = '/home/ubuntu/vosml/model/' + db_name +'/'
debug_mode='ON'
parallel_processes = 10



# Check whether the specified path exists or not
isExist = os.path.exists(save_path)

if not isExist:
  
  # Create a new directory because it does not exist 
  os.makedirs(save_path)
  os.chmod(save_path, 0o777)
  print("The new directory is created!")

  

print("------------Initializing Training queries------------")


Training_sql_query = "SELECT * FROM " + db_name + "." + input_table_name + " where " + data_col +  " is not NULL"
date_val = ""

Training_pre_sql_query = "select distinct p." + partition_col + " from " + db_name + "." + input_table_name + " p,(select a." + partition_col + " from " + db_name + "." + input_table_name + " a Where a." + data_col + " is not NULL group by a." + partition_col + " having count(a." + partition_col + ")>2) q where p." + partition_col + " = q.UniqueKey"

cnx = mysql.connector.connect(user = db_username, password = db_passw, host = db_ip, database = db_name, auth_plugin='mysql_native_password')
mycursor = cnx.cursor()
   
    
   
print("------------Model Training Started------------")
print(Training_sql_query + date_val)

if Training_sql_query != '':
  mycursor.execute(Training_sql_query + date_val)
  result=mycursor.fetchall()
  Source_dataframe = pd.DataFrame(result, columns= mycursor.column_names)
  cnx.commit()


with open(save_path + input_file_name, 'w') as f:
    Source_dataframe.to_csv(f)
    #os.chmod(save_path + input_file_name, 0o777)
    
time.sleep(15)
#print(Training_pre_sql_query + date_val)

if Training_pre_sql_query != '':
  mycursor.execute(Training_pre_sql_query + date_val)
  result=mycursor.fetchall()
  df_Uniquevalues = pd.DataFrame(result, columns= mycursor.column_names)
  cnx.commit()
  

cnx.close()

#main_task = loop.create_task(fossil_model_training_async.task_creation(time_col, data_col, partition_col,
#                                                                       input_file_name, df_Uniquevalues, save_path, 
#                                                                       model_prefix, debug_mode, parallel_processes, loop))
#await main_task 
model_training.task_creation(time_col, data_col, partition_col,
                                          input_file_name, df_Uniquevalues, save_path, 
                                          model_prefix, debug_mode, parallel_processes, loop)

    


now = datetime.now()
end = time.time()
End_time = now.strftime("%H:%M:%S")
print("Current Time =", End_time)
# total time taken
print(f"Runtime of the program is {(end - start)/60} mins")
    

#loop = asyncio.get_event_loop()
#loop.run_until_complete(main())
#if __name__ == "__main__":
#    asyncio.run(main())
